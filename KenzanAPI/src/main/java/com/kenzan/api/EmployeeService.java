package com.kenzan.api;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.kenzan.api.model.Employee;
import com.kenzan.api.model.EmployeeToUpdate;

/**
 * 
 * @author pavanv 
 * Kenzan Employee Service interface . 
 * Exposes creation, Update, Delete (inactivate) and get of all employee details
 */
@Path("/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface EmployeeService {
	
	@GET
	@Path("/{id}/")	
	/**
	 * GET request API to retrieve the employee details
	 * Employe details are received only when the EMplyee is active
	 * FOr inactive employees or invalid emplyee Id HTTP response code 404 is thrown
	 * @param employeeId The request Employee ID
	 * @return Employee object 
	 */
	
	public Employee getEmployee(@PathParam("id") String employeeId);

	@GET
	@Path("/getall")
	/**
	 * GET request for all Active employees 
	 * @return Array of Active Employee objects
	 */
	
	public Employee[] getAllEmployees();
	
	@PUT
	@Path("/")
	/**
	 * PUT new Employee
	 * Create Employee with the Employee details . EMployee ID is autogenerated
	 * Validates Mandatory parameters 
	 * @param employee Employee object to be added
	 * @return EmployeeID
	 * HTTP Response Code BAD_REQUEST is returned in case of validation failure
	 */
	public String addEmployee(Employee employee);
	
	@PUT
	@Path("/{id}/")
	/**
	 * PUT an existing Employee - updates existing employee details
	 * full details including the unchanged details are to be submitted as API does a full record update
	 * @param employeeId Employee ID which needs updates
	 * @param employee Employee object to update
	 */
	public void updateEmployee(@PathParam("id")String employeeId,EmployeeToUpdate employee);
	
	@DELETE
	@Path("/{id}/")
	/**
	 * Delete- Soft delete( Inactive employee) API is available only for users having ROLE_ADMIN privilage
	 *  @param employeeId employeeID which needs tobe made inactive
	 *  @returns 404, 403 for Authorization failures, 404 invalid EmployeeID 
	 */
	public void removeEmployee(@PathParam("id")String employeeId);

}
